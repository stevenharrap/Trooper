@inherits System.Web.Mvc.WebViewPage<Trooper.App.Ui.StdTemplate.Models.StdLayoutModel>
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Trooper.App.Ui.StdTemplate
@using Trooper.App.Ui.StdTemplate.Classes
@using Trooper.App.Ui.StdTemplate.Models
@using Trooper.BusinessOperation.Business
@using Trooper.Properties
@using Trooper.Ui.Mvc.Cruncher
@using Microsoft.Ajax.Utilities

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.PageName</title>

    @{
        Trooper.Ui.Mvc.Bootstrap.Html<StdLayoutModel>.Init(Html);
        
        StdTheming.Init(Html);

        var cruncher = new Cruncher(Html);
        
        cruncher.HeaderCss().AddInline(Resources.StdThemeTemplate_less, less: true, order: StoreItem.OrderOptions.Middle);
        cruncher.HeaderJs().AddInline(Resources.StdThemeTemplate_js, order: StoreItem.OrderOptions.Last);
        cruncher.HeaderJs().AddInline("var stdThemeTemplate = new StdThemeTemplate();");
    }
    
    @helper FormatMessage(Message message) 
    {
        switch (message.Level)
        {
            case MessageAlertLevel.Error:
                <span class="glyphicon glyphicon-wrench text-danger"></span>
                @message.Content
                break;

            case MessageAlertLevel.Warning:
                <span class="glyphicon glyphicon-warning-sign text-warning"></span>
                @message.Content
                break;

            case MessageAlertLevel.Note:
                <span class="glyphicon glyphicon-info-sign text-success"></span>
                @message.Content
                break;
        }
    }

     @cruncher.Header()
</head>

<body class="@(Model.ShowLogoRow ? "logo-row-open" : "logo-row-closed")">
    <div class="navbar navbar-fixed-top navbar-inverse" role="navigation">
        <div class="top-logo-area">
            <div class="container">
                <div class="col-md-12">
                    <div class="logo">
                        <a href="@Url.Content("~/")">
                            <img src="@Url.Action("GetLogo", "StdTheming")" 
                                 width="181" 
                                 height="73"
                                 alt="Trooper" />
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="navbar-header">
                <button type="button" class="btn btn-info navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="glyphicon glyphicon-circle-arrow-down"></span>
                </button>
                <a class="navbar-logo-area navbar-brand hidden-sm hidden-xs" href="@Url.Content("~/")">
                    <img src="@Url.Action("GetLogo", "StdTheming")"
                         height="30"
                         alt="Trooper" />
                </a>

                <a class="navbar-brand" href="@Url.Content("~/")">@Model.AppName</a>
                
                @if (Model.ShowLeftNavigation)
                {
                    <button type="button" class="btn btn-info navbar-toggle visible-xs" data-toggle="offcanvas">
                        <span class="glyphicon glyphicon-circle-arrow-left"></span>
                    </button>
                }
            </div>
            <div class="collapse navbar-collapse">
                @if (Model.TopNavItems != null)
                {
                    <ul class="nav navbar-nav">
                        @foreach (var n in Model.TopNavItems)
                        {
                            if (n.NavItems != null && n.NavItems.Any())
                            {
                                <li class="dropdown">
                                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">@n.Title</a>
                                    <ul class="dropdown-menu">
                                        @foreach (var sn in n.NavItems)
                                        {
                                            if (sn.NavItemType == NavItemTypes.Break)
                                            {
                                                <li class="divider"></li>
                                            }
                                            else
                                            {
                                                <li>
                                                    @StdTemplateHelper.GetNavItemLink(sn)
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                            else
                            {
                                <li>
                                    @StdTemplateHelper.GetNavItemLink(n)
                                </li>
                            }
                        }
                    </ul>
                }
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <h1 class="page-name">@Model.PageName</h1>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { action = Model.FormAction }))
    {
        if (Model.ShowTopSearch)
        {
            @RenderSection("TopSearch", false)
        }
        
        @RenderSection("Header", false)
            
        <div class="container">
            <div class="row row-offcanvas row-offcanvas-left">
                @if (Model.ShowLeftNavigation)
                {
                    <div class="col-xs-6 col-sm-2 sidebar-offcanvas" id="sidebar" role="navigation">
                        @RenderSection("LeftNavigation", false)
                    </div>
                }

                <div class="@(Model.ShowLeftNavigation ? "col-xs-12 col-sm-10" : "col-xs-12 col-sm-12")">
                    @if (Model.ShowRecordManagement)
                    {
                        <div class="submit-results alert 
                            @(Model.OperationResponse.Ok && !Model.OperationResponse.Warn 
                            ? "alert-success" 
                            : Model.OperationResponse.Ok && Model.OperationResponse.Warn 
                            ? "alert-warning" 
                            : "alert-danger")">
                            <div class="row">
                                <div class="col-md-10">
                                    <h4>
                                        @Model.RecordManagementTitle
                                    </h4>

                                    @if (Model.OperationResponse.Messages != null)
                                    {
                                        var messages = Model.OperationResponse.Messages.Where(m => m.Level == MessageAlertLevel.Error).ToList();
                                        messages.AddRange(Model.OperationResponse.Messages.Where(m => m.Level == MessageAlertLevel.Warning));
                                        messages.AddRange(Model.OperationResponse.Messages.Where(m => m.Level == MessageAlertLevel.Note));
                                        
                                        var total = messages.Count;
                                        var even = total % 2 == 0;
                                        var a = 0;
                                        var b = even ? (total / 2) - 1 : (total / 2);
                                        var c = even ? (total / 2) : (total / 2) + 1;
                                        var d = total;
                                        
                                        <div class="errors">
                                            <hr />
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <ul>
                                                        @for (var i = a; i <= b; i++)
                                                        {
                                                            <li>@FormatMessage(messages.ElementAt(i))</li>
                                                        }
                                                    </ul>
                                                </div>
                                                @if (total > 1)
                                                {
                                                    <div class="col-md-6">
                                                        <ul>
                                                            @for (var i = c; i < d; i++)
                                                            {
                                                                <li>@FormatMessage(messages.ElementAt(i))</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        
                                    }
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="close any">
                                        <span class="glyphicon glyphicon-remove-circle"></span>
                                    </button>
                                    @if (Model.OperationResponse.Messages != null)
                                    {
                                        <button type="button" class="close close-errors">
                                            <span class="glyphicon glyphicon-chevron-up"></span>
                                        </button>
                                        
                                        <button type="button" class="close open-errors" style="display: none">
                                            <span class="glyphicon glyphicon-chevron-down"></span>
                                        </button>
                                    }

                                </div>
                            </div>
                        </div>
                    }

                    <div class="main-area">
                        @RenderSection("MainArea", false)
                    </div>
                </div>
            </div>
        </div>
            
        <div class="navbar-fixed-bottom bottom-area">
            <div class="container ">
                <div class="row row-offcanvas row-offcanvas-left">
                    @if (Model.ShowLeftNavigationButtons)
                    {
                        <div class="col-xs-2 col-xs-6 sidebar-offcanvas">
                            <div class="btn-group">
                                @RenderSection("LeftNavigationButtons", false)
                            </div>
                        </div>
                    }

                    <div class="@(Model.ShowLeftNavigationButtons ? "col-md-10 col-sx-6" : "col-md-12 col-sx-12")">
                        <div class="btn-group">
                            @RenderSection("MainNavigationButtons", false)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</body>
</html>
