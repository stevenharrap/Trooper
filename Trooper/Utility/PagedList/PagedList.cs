// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PagedList.cs" company="Trooper Inc">
//   Copyright (c) Trooper 2014 - Onwards
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Trooper.Utility.PagedList
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Creates a List from which paging can be performed.
    /// <code>
    /// <![CDATA[
    ///     var data = new List<Thing>();
    ///     //Populate data with 
    ///     var pagedData = new PagedList<Thing>(data, currentPageNum, 20)
    ///     //Display everything is pagedData - it will only contain current page items.
    ///     //Keep a record of the current page num
    /// ]]>
    /// </code>
    /// </summary>
    /// <typeparam name="T">The List type
    /// </typeparam>
    public class PagedList<T> : List<T>, IPagedList
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagedList{T}"/> class.
        /// </summary>
        /// <param name="source"> The source. </param>
        /// <param name="index"> The index. </param>
        /// <param name="pageSize"> The page size. </param>
        public PagedList(List<T> source, int index, int pageSize)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            this.Source = source;
            
            this.MovePage(index, pageSize);
        }

        /// <summary>
        /// Gets Total Pages in the list
        /// </summary>
        public int TotalPages
        {
            get
            {
                return (int)Math.Ceiling((double)this.Source.Count / this.PageSize);
            }
        }

        /// <summary>
        /// Gets current Page Index.
        /// </summary>
        public int PageIndex { get; private set; }

        /// <summary>
        /// Gets Page Size.
        /// </summary>
        public int PageSize { get; private set; }

        /// <summary>
        /// Gets a value indicating whether Is PreviousPage.
        /// </summary>
        public bool IsPreviousPage
        {
            get
            {
                return this.PageIndex > 0;
            }
        }

        /// <summary>
        /// Gets a value indicating whether Is NextPage.
        /// </summary>
        public bool IsNextPage
        {
            get
            {
                return (this.PageIndex * this.PageSize) <= this.Source.Count;
            }
        }

        /// <summary>
        /// Gets or sets Source.
        /// </summary>
        private List<T> Source { get; set; }

        /// <summary>
        /// Moves to a different page
        /// </summary>
        /// <param name="index">
        /// The index of the
        /// </param>
        /// <param name="pageSize">
        /// The page size if changing
        /// </param>
        public void MovePage(int index, int pageSize)
        {
            this.PageSize = pageSize;
            this.PageIndex = index;
            this.Clear();
            this.AddRange(this.Source.Skip(index * pageSize).Take(pageSize).ToList());
        }

        /// <summary>
        /// Moves to a different page using the same page size
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        public void MovePage(int index)
        {
            this.MovePage(index, this.PageSize);
        }

        /// <summary>
        /// Gets all the pages that could be generated by from source
        /// </summary>
        /// <returns>
        /// A List of List of T - a list of pages.
        /// </returns>
        public List<List<T>> GetPages()
        {
            var tempList = new PagedList<T>(this.Source, 0, this.PageSize);
            var result = new List<List<T>>();

            for (var i = 0; i < tempList.TotalPages; i++)
            {
                tempList.MovePage(i);
                result.Add(new List<T>(tempList));
            }

            return result;
        }
    }
}