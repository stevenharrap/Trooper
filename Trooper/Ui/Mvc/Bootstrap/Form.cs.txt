//--------------------------------------------------------------------------------------
// <copyright file="BsfTestModel.cs" company="Trooper Inc">
//     Copyright (c) Trooper 2014 - Onwards
// </copyright>
//--------------------------------------------------------------------------------------

namespace Trooper.Ui.Mvc.Bootstrap
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Web;
    using System.Web.Mvc;

    using Trooper.Properties;
    using Trooper.Ui.Mvc.Bootstrap.Models;
    using Trooper.Ui.Mvc.Cruncher;
    using Trooper.Utility;

    /// <summary>
    /// Bootstrap is a CSS library from Twitter. It is very good at Html5 layout and provides
    /// flexible device independent display. This class provides a list of form controls with
    /// extra help from Bootstrap and JQuery for a better user experience. Using this class 
    /// in your pages with Cruncher will automatically inject the Jquery and Bootstrap client
    /// side requirements.
    /// <see cref="http://twitter.github.io/bootstrap/"/>
    /// </summary>
    /// <typeparam name="TModel">
    /// The model type in your view
    /// </typeparam>
    public class Form<TModel> : Html<TModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Form{TModel}"/> class.
        /// By instantiating this the Html class will inject the JQuery and Bootstrap JS and CSS classes.
        /// </summary>
        /// <param name="htmlHelper">
        /// The html helper.
        /// </param>
        public Form(HtmlHelper<TModel> htmlHelper)
            : base(htmlHelper)
        {
            if (!this.Cruncher.HeaderJs().HasItem("BootstrapForm_js"))
            {
                this.Cruncher.HeaderJs()
                    .AddInline(Resources.BootstrapForm_js, name: "BootstrapForm_js", order: StoreItem.OrderOptions.Middle);

                this.Cruncher.HeaderJs().AddInline("var bootstrapForm = new BootstrapForm();");
            }
        }

        /// <summary>
        /// Gets or sets if all controls that support the disabled or readonly parameter 
        /// enabled or disabled (readonly in some cases) by default.
        /// Giving a control a specific disabled or readonly value will over-ride this.
        /// By default this is null and so are the enabled/readonly properties so
        /// result state of a control will be that it is access-able by default.
        /// </summary>
        public bool? ControlsEnabled { get; set; }

        /// <summary>
        /// Create an integer input.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="minimum">
        /// The minimum value.
        /// </param>
        /// <param name="maximum">
        /// The maximum value.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString IntegerFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            decimal? minimum = null,
            decimal? maximum = null,
            bool warnOnLeave = true,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.TextBoxFor(
                expression,
                title: title,
                numericType: Options.NumericType.Integer,
                minimum: minimum,
                maximum: maximum,
                warnOnLeave: warnOnLeave,
                @readonly: @readonly,
                layout: layout,
                textSize: textSize,
                appendButtons: appendButtons,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Create an percentage input.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="minimum">
        /// The minimum value.
        /// </param>
        /// <param name="maximum">
        /// The maximum value.
        /// </param>
        /// <param name="decimalDigits">
        /// The number decimal Digits to display. If left null then now checking on 
        /// the number of digits will be made.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString PercentageFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            decimal? minimum = null,
            decimal? maximum = null,
            int? decimalDigits = null,
            bool warnOnLeave = true,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.TextBoxFor(
                expression,
                title: title,
                numericType: Options.NumericType.Percentage,
                minimum: minimum,
                maximum: maximum,
                decimalDigits: decimalDigits,
                warnOnLeave: warnOnLeave,
                @readonly: @readonly,
                layout: layout,
                textSize: textSize,
                appendButtons: appendButtons,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Create an currency input..
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="minimum">
        /// The minimum value.
        /// </param>
        /// <param name="maximum">
        /// The maximum value.
        /// </param>
        /// <param name="decimalDigits">
        /// The number decimal Digits to display. If left null then now checking on 
        /// the number of digits will be made.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString CurrencyFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            decimal? minimum = null,
            decimal? maximum = null,
            int? decimalDigits = null,
            bool warnOnLeave = true,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.TextBoxFor(
                expression,
                title: title,
                numericType: Options.NumericType.Currency,
                minimum: minimum,
                maximum: maximum,
                decimalDigits: decimalDigits,
                warnOnLeave: true,
                @readonly: @readonly,
                layout: layout,
                textSize: textSize,
                appendButtons: appendButtons,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Create an decimal input..
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="minimum">
        /// The minimum value.
        /// </param>
        /// <param name="maximum">
        /// The maximum value.
        /// </param>
        /// <param name="decimalDigits">
        /// The number decimal Digits to display. If left null then now checking on 
        /// the number of digits will be made.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString DecimalFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            decimal? minimum = null,
            decimal? maximum = null,
            int? decimalDigits = null,
            bool warnOnLeave = true,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.TextBoxFor(
                expression,
                title: title,
                numericType: Options.NumericType.Decimal,
                minimum: minimum,
                maximum: maximum,
                decimalDigits: decimalDigits,
                warnOnLeave: warnOnLeave,
                @readonly: @readonly,
                layout: layout,
                textSize: textSize,
                appendButtons: appendButtons,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Creates a text area input.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="rows">
        /// The rows to display.
        /// </param>
        /// <param name="maxLength">
        /// The max length.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TextAreaFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            int rows = 5,
            int? maxLength = null,
            bool? @readonly = null,
            bool warnOnLeave = true,
            Options.InputTextSizes? textSize = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.TextBoxFor(
                expression,
                title: title, 
                multiline: true,
                rows: rows,
                maxLength: maxLength,
                @readonly: @readonly,
                warnOnLeave: warnOnLeave,
                textSize: textSize,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Creates a button control.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="specificValue">
        /// The value that the button should have.
        /// </param>
        /// <param name="buttonType">
        /// The button type.
        /// </param>
        /// <param name="submit">
        /// Should the button submit.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="toolTip">
        /// Provides a tool tip for the button. 
        /// </param>
        /// <param name="visible">
        /// Should the button be visible to the user.
        /// </param>
        /// <param name="icon">
        /// If the icon name is provided then the icon from <see cref="http://getbootstrap.com/components/"/> 
        /// will be pre-pended to the button. Only use the last part of the icon name 'volume-up'
        /// from 'glyphicon-volume-up'
        /// </param>
        /// <param name="attrs">
        /// Any other attributes that you want to add to the button. This is in the form 'new { thing = "value1", other = "value2" }
        /// </param>
        /// <param name="classes">
        /// Optionally add extra classes to the button
        /// </param>
        /// <param name="disabled">
        /// Should the button appear disabled
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString ButtonFor<TValue>(
            Expression<Func<TModel, TValue>> expression, 
            object specificValue = null,
            Options.ButtonTypes buttonType = Options.ButtonTypes.Default,
            bool submit = false,
            string title = null,
            string toolTip = null,
            bool visible = true,
            string icon = null,
            object attrs = null,
            List<string> classes = null,
            bool? disabled = null)
        {
            var value = this.GetExpressionValue(expression);
            var name = this.GetExpressionAsName(expression);
            var buttonClasses = new List<string>
                              {
                                  buttonType == Options.ButtonTypes.None ? string.Empty : this.ButtonTypeToString(buttonType)
                              };

            buttonClasses = AddClass(buttonClasses, "btn");
            buttonClasses = AddClasses(buttonClasses, classes);
            
            var result = 
                string.Format(
                    "<button type=\"{0}\" {1} name=\"{2}\" value=\"{3}\"{4}{5}{6} {7}>{8}{9}</button>",
                    submit ? "submit" : "button",
                    MakeClassAttribute(buttonClasses),
                    name,
                    specificValue ?? value,
                    this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty,
                    visible ? string.Empty : " style=\"display: none\"",
                    string.IsNullOrEmpty(toolTip) ? string.Empty : string.Format(" title=\"{0}\"", toolTip),
                    this.MakeAttrList(attrs),
                    string.IsNullOrEmpty(icon) ? string.Empty : string.Format("<span class=\"glyphicon glyphicon-{0}\"></span> ", icon),
                    title);

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a button control.
        /// </summary>
        /// <param name="id">
        /// The id of the button
        /// </param>
        /// <param name="buttonType">
        /// The button type.
        /// </param>
        /// <param name="submit">
        /// Should the button submit.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="toolTip">
        /// Provides a tool tip for the button. 
        /// </param>
        /// <param name="visible">
        /// Should the button be visible to the user.
        /// </param>
        /// <param name="icon">
        /// If the icon name is provided then the icon from <see cref="http://getbootstrap.com/components/"/> 
        /// will be pre-pended to the button. Only use the last part of the icon name 'volume-up'
        /// from 'glyphicon-volume-up'
        /// </param>
        /// <param name="attrs">
        /// Any other attributes that you want to add to the button. This is in the form 'new { thing = "value1", other = "value2" }
        /// </param>
        /// <param name="classes">
        /// Optionally add extra classes to the button
        /// </param>
        /// <param name="disabled">
        /// Should the button appear disabled
        /// </param>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString Button(
            string id,
            Options.ButtonTypes buttonType = Options.ButtonTypes.Default,
            bool submit = false,
            string title = null,
            string toolTip = null,
            bool visible = true,
            string icon = null,
            object attrs = null,
            List<string> classes = null,
            bool disabled = false)
        {
            var name = id.Replace("_", ".");
            var buttonClasses = new List<string>
                              {
                                  buttonType == Options.ButtonTypes.None ? string.Empty : this.ButtonTypeToString(buttonType)
                              };

            buttonClasses = AddClass(buttonClasses, "btn");
            buttonClasses = AddClasses(buttonClasses, classes);

            var result =
                string.Format(
                    "<button type=\"{0}\" {1} name=\"{2}\" id=\"{3}\"{4}{5}{6} {7}>{8}{9}</button>",
                    submit ? "submit" : "button",
                    MakeClassAttribute(buttonClasses),
                    name,
                    id,
                    this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty,
                    visible ? string.Empty : " style=\"display: none\"",
                    string.IsNullOrEmpty(toolTip) ? string.Empty : string.Format(" title=\"{0}\"", toolTip),
                    this.MakeAttrList(attrs),
                    string.IsNullOrEmpty(icon) ? string.Empty : string.Format("<span class=\"glyphicon glyphicon-{0}\"></span> ", icon),
                    title);

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a button control that links to the given url.
        /// </summary>
        /// <param name="id">
        /// The id of the button
        /// </param>
        /// <param name="url">
        /// The URL to submit to 
        /// </param>
        /// <param name="buttonType">
        /// The button type.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="toolTip">
        /// Provides a tool tip for the button. 
        /// </param>
        /// <param name="visible">
        /// Should the button be visible to the user.
        /// </param>
        /// <param name="icon">
        /// If the icon name is provided then the icon from <see cref="http://getbootstrap.com/components/"/> 
        /// will be pre-pended to the button. Only use the last part of the icon name 'volume-up'
        /// from 'glyphicon-volume-up'
        /// </param>
        /// <param name="attrs">
        /// Any other attributes that you want to add to the button. This is in the form 'new { thing = "value1", other = "value2" }
        /// </param>
        /// <param name="classes">
        /// Optionally add extra classes to the button
        /// </param>
        /// <param name="disabled">
        /// Should the button appear disabled
        /// </param>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString LinkButton(
            string id,
            string url = null,
            Options.ButtonTypes buttonType = Options.ButtonTypes.Default,
            string title = null,
            string toolTip = null,
            bool visible = true,
            string icon = null,
            object attrs = null,
            List<string> classes = null,
            bool disabled = false)
        {
            var name = id.Replace("_", ".");
            var buttonClasses = new List<string>
                              {
                                  buttonType == Options.ButtonTypes.None ? string.Empty : this.ButtonTypeToString(buttonType)
                              };

            buttonClasses = AddClass(buttonClasses, "btn");
            buttonClasses = AddClasses(buttonClasses, classes);

            var result =
                string.Format(
                    "<button type=\"button\" {0} name=\"{1}\" id=\"{2}\"{3}{4}{5}{6} {7}>{8}{9}</button>",
                    MakeClassAttribute(buttonClasses),
                    name,
                    id,
                    this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty,
                    visible ? string.Empty : " style=\"display: none\"",
                    string.IsNullOrEmpty(url) ? string.Empty : string.Format(" onclick=\"window.location.href='{0}'\"", url),
                    string.IsNullOrEmpty(toolTip) ? string.Empty : string.Format(" title=\"{0}\"", toolTip),
                    this.MakeAttrList(attrs),
                    string.IsNullOrEmpty(icon) ? string.Empty : string.Format("<span class=\"glyphicon glyphicon-{0}\"></span> ", icon),
                    title);

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a button control.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="specificValue">
        /// The value that the button should have.
        /// </param>
        /// <param name="buttonType">
        /// The button type.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="toolTip">
        /// Provides a tool tip for the button. 
        /// </param>
        /// <param name="visible">
        /// Should the button be visible to the user.
        /// </param>
        /// <param name="icon">
        /// If the icon name is provided then the icon from <see cref="http://getbootstrap.com/components/"/> 
        /// will be pre-pended to the button. Only use the last part of the icon name 'volume-up'
        /// from 'glyphicon-volume-up'
        /// </param>
        /// <param name="attrs">
        /// Any other attributes that you want to add to the button. This is in the form 'new { thing = "value1", other = "value2" }
        /// </param>
        /// <param name="classes">
        /// Optionally add extra classes to the button
        /// </param>
        /// <param name="disabled">
        /// Should the button appear disabled
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString SubmitFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            TValue specificValue = default(TValue),
            Options.ButtonTypes buttonType = Options.ButtonTypes.Default,
            string title = null,
            string toolTip = null,
            bool visible = true,
            string icon = null,
            object attrs = null,
            List<string> classes = null,
            bool disabled = false)
        {
            return this.ButtonFor(
                expression,
                specificValue: specificValue,
                buttonType: buttonType,
                title: title,
                toolTip: toolTip,
                visible: visible,
                disabled: disabled,
                icon: icon,
                attrs: attrs,
                classes: classes,
                submit: true);
        }

        /// <summary>
        /// Creates a text box control.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="numericType">
        /// The numeric type.
        /// </param>
        /// <param name="minimum">
        /// If the text box is numeric then the minimum.
        /// </param>
        /// <param name="maximum">
        /// If the text box is numeric then the maximum.
        /// </param>
        /// <param name="decimalDigits">
        /// The number decimal Digits to display. If left null then now checking on 
        /// the number of digits will be made.
        /// </param>
        /// <param name="multiline">
        /// Is the text box multiline.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="rows">
        /// The rows if the text box is multiline.
        /// </param>
        /// <param name="maxLength">
        /// The max length in characters.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TextBoxFor<TValue>(
            Expression<Func<TModel, TValue>> expression, 
            string title = null,
            Options.NumericType? numericType = null,
            decimal? minimum = null,
            decimal? maximum = null,
            int? decimalDigits = null,
            bool multiline = false,
            bool warnOnLeave = true,
            int rows = 0,
            int? maxLength = null,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            var id = this.GetExpressionAsId(expression);
            var name = this.GetExpressionAsName(expression);
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);
            var value = this.GetExpressionValue(expression);

            return this.TextBox(
                id,
                name: name,
                title: title,
                valid: valid,
                // ReSharper disable RedundantNameQualifier
                value: object.ReferenceEquals(value, null) ? string.Empty : value.ToString(),
                // ReSharper restore RedundantNameQualifier
                numericType: numericType,
                minimum: minimum,
                maximum: maximum,
                decimalDigits: decimalDigits,
                multiline: multiline,
                warnOnLeave: warnOnLeave,
                rows: rows,
                maxLength: maxLength,
                @readonly: @readonly,
                layout: layout,
                textSize: textSize,
                appendButtons: appendButtons);
        }

        /// <summary>
        /// Creates a text box control.
        /// </summary>
        /// <param name="id">
        /// The id of the control.
        /// </param>
        /// <param name="name">
        /// Optionally set the name.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="valid">
        /// Is the content of the control valid.
        /// </param>
        /// <param name="value">
        /// The value of the control.
        /// </param>
        /// <param name="numericType">
        /// The numeric type.
        /// </param>
        /// <param name="minimum">
        /// If the text box is numeric then the minimum.
        /// </param>
        /// <param name="maximum">
        /// If the text box is numeric then the maximum.
        /// </param>
        /// <param name="decimalDigits">
        /// The number decimal Digits to display. If left null then now checking on 
        /// the number of digits will be made.
        /// </param>
        /// <param name="multiline">
        /// Is the text box multiline.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="rows">
        /// The rows if the text box is multiline.
        /// </param>
        /// <param name="maxLength">
        /// The max length in characters.
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="layout">
        /// You can override the layout with your own format. Appended buttons, percentage, and dollar indicators will be ignored
        /// if you provide this. The string should be in the format "{0}". If you want to add text then use MakeTextBoxAddon. If you
        /// want to add icon use MakeIcon. If you want to add text and icons use a combination of both. For example: 
        /// <code>
        /// <![CDATA[
        ///     layout = MakeTextBoxAddon("hello") + "{0}" + MakeIcon("volumne-up")
        /// ]]>
        /// </code>
        /// You should only use combinations of MakeTextBoxAddon and MakeIcon as they will provide the correct html to work inside the control.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="appendButtons">
        /// Append these buttons (html)s the end of the text box.
        /// </param>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TextBox(
            string id,
            string name = null,
            string title = null,
            bool valid = true,
            string value = null,
            Options.NumericType? numericType = null,
            decimal? minimum = null,
            decimal? maximum = null,
            int? decimalDigits = null,
            bool multiline = false,
            bool warnOnLeave = true,
            int rows = 0,
            int? maxLength = null,
            bool? @readonly = null,
            string layout = null,
            Options.InputTextSizes? textSize = null,
            List<MvcHtmlString> appendButtons = null)
        {
            //// first lets add our javascript core and control instance
            if (!this.Cruncher.HeaderJs().HasItem("BootstrapTextBox_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapTextBox_js,
                              name: "BootstrapTextBox_js",
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "var {0}_BootstrapTextbox = new BootstrapTextbox({{inputId : '{0}', maxLength: {1}, numericType: '{2}', minimum: {3}, maximum: {4}, decimalDigits: {5}, warnOnLeave: {6}}});",
                            id,
                            Conversion.ConvertToInt(maxLength, 0),
                            numericType,
                            minimum == null ? "null" : Conversion.ConvertToString(minimum),
                            maximum == null ? "null" : Conversion.ConvertToString(maximum),
                            decimalDigits == null ? "null" : Conversion.ConvertToString(decimalDigits),
                            warnOnLeave.ToString().ToLower()));

            //// Then lets get our text box attributes 
            var textBoxAttrs = new Dictionary<string, object>();

            var cssClasses = string.Format(
                "form-control {0}",
                textSize == null ? string.Empty : FormatInputTextSize(textSize));

            textBoxAttrs.Add("class", cssClasses);

            if (this.IsControlReadonly(@readonly))
            {
                textBoxAttrs.Add("readonly", "readonly");
            }

            if (!string.IsNullOrEmpty(name))
            {
                textBoxAttrs.Add("name", name);
            }

            if (maxLength != null && maxLength > 0)
            {
                textBoxAttrs.Add("maxlength", maxLength);
            }
            
            //// if its a text area then the story ends here
            if (multiline)
            {
                var result = string.Format(
                    "<textarea id=\"{0}\" rows=\"{1}\" {2}>{3}</textarea>\n",
                    id,
                    rows,
                    textBoxAttrs.Aggregate(
                        string.Empty,
                        (current, next) =>
                        current
                        + string.Format(
                            " {0}=\"{1}\"", next.Key, HttpUtility.HtmlAttributeEncode(next.Value.ToString()))),
                    value);

                result = FormatControlGroup(title, id, valid, result);

                return MvcHtmlString.Create(result);
            }
            
            //// Lets make the control
            var control = string.Format(
                "<input type=\"text\" id=\"{0}\" value=\"{1}\" {2} />\n",
                id,
                HttpUtility.HtmlAttributeEncode(value),
                textBoxAttrs.Aggregate(
                    string.Empty,
                    (current, next) =>
                    current
                    + string.Format(
                        " {0}=\"{1}\"", next.Key, HttpUtility.HtmlAttributeEncode(next.Value.ToString()))));

            //// If we've been given a layout then lets resolve the control into the layout, wrap it in a control group 
            //// and leave.
            if (!string.IsNullOrEmpty(layout))
            {
                layout = string.Format(layout, control);
                var result = string.Format("<div class=\"input-group\">\n{0}\n</div>", layout);

                result = FormatControlGroup(title, id, valid, result);

                return MvcHtmlString.Create(result);
            }

            //// Otherwise lets see if we're a currency or percentage create the appropriate addons.
            var pre = string.Empty;
            var post = string.Empty;

            if (numericType == Options.NumericType.Currency)
            {
                pre = "<span class=\"input-group-addon\">$</span>\n";
            }

            if (numericType == Options.NumericType.Percentage)
            {
                post = "<span class=\"input-group-addon\">%</span>\n";
            }

            //// If we have buttons then lets add them to the post
            if (appendButtons != null)
            {
                post += appendButtons.Aggregate("<span class=\"input-group-btn\">\n", (current, b) => current + (b + "\n"));

                post += "</span>\n";
            }
            
            //// If we ended up with anything in pre and post then glue the whole lot together, wrap it and leave.
            //// Otherwise its just the control.
            if (!string.IsNullOrEmpty(pre) || !string.IsNullOrEmpty(post))
            {
                var result = string.Format("<div class=\"input-group\">\n{0}{1}{2}\n</div>", pre, control, post);

                result = FormatControlGroup(title, id, valid, result);

                return MvcHtmlString.Create(result);
            }
            else
            {
                var result = FormatControlGroup(title, id, valid, control);

                return MvcHtmlString.Create(result);
            }
        }

        /// <summary>
        /// Creates an upload controls. Uploads are immediately submitted to the server
        /// in an IFrame. The form inputs are then updated and then server knows the details
        /// in the model on the next post.
        /// </summary>
        /// <param name="uploadModelExpression">
        /// The property in your model that is a reference to the UploadModel 
        /// </param>
        /// <param name="modelPropertyExpression">
        /// The property in your model that provides the ID for the document.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="warnOnLeave">
        /// The warn On Leave.
        /// </param>
        /// <param name="readonly">
        /// Make the input readonly 
        /// </param>        
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// An UploadModel instance from your view model.
        /// </typeparam>
        /// <typeparam name="TDlValue">
        /// Data type used in the expression for generating a link to the current document.
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString UploadFor<TValue, TDlValue>(
            Expression<Func<TModel, TValue>> uploadModelExpression,
            Expression<Func<TModel, TDlValue>> modelPropertyExpression,
            string title = null,
            bool warnOnLeave = true,
            bool? @readonly = null,
            List<BusinessOperation.Business.Error> errors = null) where TValue : UploadModel
        {
            var value = this.GetExpressionValue(uploadModelExpression);
            var name = this.GetExpressionAsName(uploadModelExpression);
            var id = this.GetExpressionAsId(uploadModelExpression);
            var valid = this.IsPropertyValid(modelPropertyExpression, errors ?? this.Errors);

            if (value == null)
            {
                return MvcHtmlString.Create(string.Empty);
            }

            var result = string.Empty;

            var action = this.UrlHelper.Action("OpenIframe", "BsUpload", new { inputId = id });

            result += "<div class=\"bs-upload-for\" id=\"" + id + "_helper\">";

            result += string.Format(
                "<input type=\"hidden\" name=\"{0}\" id=\"{1}\" value=\"{2}\" />",
                this.GetExpressionAsName(modelPropertyExpression),
                this.GetExpressionAsId(modelPropertyExpression),
                this.GetExpressionValue(modelPropertyExpression));

            result += "<iframe style=\"display:none\" src=\"" + action + "\"></iframe><input type=\"hidden\" name=\""
                      + name + ".PersistId\" id=\"" + id + "_PersistId\" value=\"" + value.PersistId
                      + "\" /><input type=\"hidden\" name=\"" + name + ".PersistName\" id=\"" + id
                      + "_PersistName\" value=\"" + value.PersistName + "\" /><input type=\"hidden\" name=\""
                      + name + ".CurrentDocumentName\" id=\"" + id + "_CurrentDocumentName\" value=\""
                      + value.CurrentDocumentName + "\" /><input type=\"hidden\" name=\"" + name
                      + ".CurrentDocumentDeleted\" id=\"" + id + "_CurrentDocumentDeleted\" value=\""
                      + value.CurrentDocumentDeleted + "\" /><input type=\"hidden\" name=\"" + name
                      + ".CurrentDocumentUrl\" id=\"" + id + "_CurrentDocumentUrl\" value=\"" + value.CurrentDocumentUrl
                      + "\" />";

            result += "<div class=\"controls input-group\">"
                      + "<input type=\"text\" class=\"form-control display\" readonly=\"readonly\" />";

            if (!this.IsControlReadonly(@readonly))
            {
                result += "<span class=\"input-group-btn\">"
                          + "<button type=\"button\" class=\"clear btn btn-default\" ><i class=\"glyphicon glyphicon-remove-circle\"></i></button>"
                          + "<button type=\"button\" class=\"browse btn btn-default\"><i class=\"glyphicon glyphicon-list-alt\"></i></button>"
                          + "</span>";
            }

            result += "</div></div>\n";

            result = FormatControlGroup(title, name + "_helper", valid, result);

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapUpload_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapUpload_js,
                              name: "BootstrapUpload_js",
                              order: StoreItem.OrderOptions.Middle);

                this.Cruncher.HeaderCss()
                          .AddInline(
                              Resources.BootstrapUpload_less,
                              name: "BootstrapUpload_less",
                              less: true,
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "var {0}_BootstrapUpload = new BootstrapUpload({{ inputId: '{0}', warnOnLeave: {1} }});",
                            id,
                            warnOnLeave.ToString().ToLower()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates an upload controls. Uploads are immediately submitted to the server
        /// in an IFrame. The form inputs are then updated and then server knows the details
        /// in the model on the next post.
        /// </summary>
        /// <param name="uploadModelExpression">
        /// The property in your model that is a reference to the UploadModel 
        /// </param>
        /// <param name="valid">
        /// If false then the control will highlight in red to indicate user action required.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="warnOnLeave">
        /// The warn On Leave.
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// An UploadModel instance from your view model.
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString Upload<TValue>(
            Expression<Func<TModel, TValue>> uploadModelExpression,
            bool valid = true,
            string title = null,
            bool warnOnLeave = true,
            List<BusinessOperation.Business.Error> errors = null) where TValue : UploadModel
        {
            var umValue = this.GetExpressionValue(uploadModelExpression);
            var umName = this.GetExpressionAsName(uploadModelExpression);
            var umId = this.GetExpressionAsId(uploadModelExpression);

            if (umValue == null)
            {
                return MvcHtmlString.Create(string.Empty);
            }

            var result = string.Empty;

            var action = this.UrlHelper.Action("OpenIframe", "BsUpload", new { inputId = umId });

            result += "<div class=\"bs-upload-for\" id=\"" + umId + "_helper\">";

            result += "<iframe style=\"display:none\" src=\"" + action + "\"></iframe><input type=\"hidden\" name=\""
                      + umName + ".PersistId\" id=\"" + umId + "_PersistId\" value=\"" + umValue.PersistId
                      + "\" /><input type=\"hidden\" name=\"" + umName + ".PersistName\" id=\"" + umId
                      + "_PersistName\" value=\"" + umValue.PersistName + "\" /><input type=\"hidden\" name=\""
                      + umName + ".CurrentDocumentName\" id=\"" + umId + "_CurrentDocumentName\" value=\""
                      + umValue.CurrentDocumentName + "\" /><input type=\"hidden\" name=\"" + umName
                      + ".CurrentDocumentDeleted\" id=\"" + umId + "_CurrentDocumentDeleted\" value=\""
                      + umValue.CurrentDocumentDeleted + "\" /><input type=\"hidden\" name=\"" + umName
                      + ".CurrentDocumentUrl\" id=\"" + umId + "_CurrentDocumentUrl\" value=\"" + umValue.CurrentDocumentUrl
                      + "\" />";

            result += "<div class=\"controls input-group\">"
                      + "<input type=\"text\" class=\"form-control display\" readonly=\"readonly\" />"
                      + "<span class=\"input-group-btn\">"
                      + "<button type=\"button\" class=\"clear btn btn-default\" ><i class=\"glyphicon glyphicon-remove-circle\"></i></button>"
                      + "<button type=\"button\" class=\"browse btn btn-default\"><i class=\"glyphicon glyphicon-list-alt\"></i></button>"
                      + "</span></div></div>\n";

            result = FormatControlGroup(title, umName + "_helper", valid, result);

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapUpload_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapUpload_js,
                              name: "BootstrapUpload_js",
                              order: StoreItem.OrderOptions.Middle);

                this.Cruncher.HeaderCss()
                          .AddInline(
                              Resources.BootstrapUpload_less,
                              name: "BootstrapUpload_less",
                              less: true,
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "var {0}_BootstrapUpload = new BootstrapUpload({{ inputId: '{0}', warnOnLeave: {1} }});",
                            umId,
                            warnOnLeave.ToString().ToLower()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Generates a list of check boxes.
        /// </summary>
        /// <param name="expression">
        /// The expression that evaluates to selected values of the list
        /// and the name and id of the inputs.
        /// </param>
        /// <param name="options">
        /// The options available in the check list
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="inline">
        /// Should the tick boxes appear in line
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="disabled">
        /// Make the input disabled 
        /// </param>
        /// <param name="scrollHeight">
        /// If there are many items then put the radios in scrolling box. This sets the height.
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// Expression data type
        /// </typeparam>
        /// <typeparam name="TOptionKey">
        /// Data type of the value of each option
        /// </typeparam>
        /// <typeparam name="TOptionValue">
        /// Date type of the display of each option
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TickboxMultiSelectFor<TValue, TOptionKey, TOptionValue>(
            Expression<Func<TModel, TValue>> expression,
            Dictionary<TOptionKey, TOptionValue> options,
            string title = null,
            bool inline = false,
            bool warnOnLeave = true,
            bool? disabled = null,
            int? scrollHeight = null,
            List<BusinessOperation.Business.Error> errors = null) 
            where TValue : List<TOptionKey> 
        {
            var value = this.GetExpressionValue(expression);
            var name = this.GetExpressionAsName(expression);
            var id = this.GetExpressionAsId(expression);
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);
            
            var result = string.Format(
                "<div class=\"{1}\">\n<label>{0}</label>\n", title, valid ? string.Empty : "error");

            if (scrollHeight != null)
            {
                result += string.Format("<div class=\"trooper y-scrolling\" style=\"height: {0}px\">", scrollHeight);
            }

            if (options != null)
            {
                foreach (var item in options)
                {
                    result += string.Format("<label class=\"control-label checkbox{0}\">\n", inline ? "-inline" : string.Empty);
                    result += string.Format(
                        "<input type=\"checkbox\" id=\"{0}\" name=\"{1}\" value=\"{2}\" {3}{4}/> {5}\n",
                        id,
                        name,
                        item.Key,
                        value != null && value.Contains(item.Key) ? "checked=\"checked\"" : string.Empty,
                        this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty,
                        item.Value);
                    result += "</label>\n";
                }
            }

            if (scrollHeight != null)
            {
                result += "</div>";
            }

            result += "</div>\n";

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapTickboxMultiSelect_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapTickboxMultiSelect_js,
                              name: "BootstrapTickboxMultiSelect_js",
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "new BootstrapTickboxMultiSelect({{ inputName: '{0}', warnOnLeave: {1} }});",
                            name,
                            warnOnLeave.ToString().ToLower()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Generates a check box
        /// </summary>
        /// <param name="expression">
        /// The expression that evaluates to selected value of the tick box
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="inline">
        /// Should the tick box appear in line to any other tick boxes
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="disabled">
        /// Make the input disabled 
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TickboxFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            bool inline = false,
            bool warnOnLeave = true,
            bool? disabled = null,
            List<BusinessOperation.Business.Error> errors = null)
        {
            var value = Conversion.ConvertToBoolean(this.GetExpressionValue(expression), false);
            var name = this.GetExpressionAsName(expression);
            var id = this.GetExpressionAsId(expression);
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);

            var result = string.Format(
                "<label for=\"{0}\" class=\"checkbox{1}{2}\">\n",
                id,
                inline ? "-inline" : string.Empty,
                valid ? string.Empty : " error");
            result += string.Format(
                        "<input type=\"checkbox\" id=\"{0}\" name=\"{1}\" value=\"true\" {2}{3}/> {4}\n",
                        id,
                        name,
                        value ? "checked=\"checked\"" : string.Empty,
                        this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty,
                        title);
            result += "</label>\n";

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapTickbox_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapTickbox_js,
                              name: "BootstrapTickbox_js",
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "new BootstrapTickbox({{ inputId: '{0}', warnOnLeave: {1} }});",
                            id,
                            warnOnLeave.ToString().ToLower()));
            
            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Generates a select list
        /// </summary>
        /// <param name="expression">
        /// The expression that evaluates to the name, id and selected value of the list
        /// </param>
        /// <param name="options">
        /// The options that should be available in the list
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="includeBlank">
        /// Include a blank option as the first option in the select box
        /// </param>
        /// <param name="blankText">
        /// If includeBlank is true then optionally define the display value of the blank option
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="disabled">
        /// Make the input disabled 
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <typeparam name="TOptionKey">
        /// Date type for the key of each option
        /// </typeparam>
        /// <typeparam name="TOptionValue">
        /// Date Type for the value of each option
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        
		public MvcHtmlString SelectFor<TValue, TOptionKey, TOptionValue>(
            Expression<Func<TModel, TValue>> expression,
            Dictionary<TOptionKey, TOptionValue> options,
            string title = null,
            bool includeBlank = false,
            string blankText = null,
            bool warnOnLeave = true,
            bool? disabled = null,
            Options.InputTextSizes? textSize = null,
            List<BusinessOperation.Business.Error> errors = null) 
            where TOptionKey : TValue
        {
            var value = this.GetExpressionValue(expression);
            var name = this.GetExpressionAsName(expression);
            var id = this.GetExpressionAsId(expression);
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);
            
            var result = string.Format(
                "<select id=\"{0}\" name=\"{1}\" class=\"form-control {2}\"{3}>\n",
                id,
                name,
                textSize == null ? string.Empty : FormatInputTextSize(textSize),
                this.IsControlDisabled(disabled) ? " disabled=\"disabled\"" : string.Empty);

            if (includeBlank)
            {
                result += string.Format("<option value=\"\">{0}</option>\n", blankText);
            }

            if (options != null)
            {
                foreach (var item in options)
                {
                    var selected = !ReferenceEquals(value, null) && value.Equals(item.Key);

                    result += string.Format(
                        "<option value=\"{0}\"{1}/>{2}</option>\n",
                        item.Key,
                        selected ? " selected=\"selected\"" : string.Empty,
                        item.Value);
                }
            }

            result += "</select>\n";

            result = FormatControlGroup(title, id, valid, result);

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapSelect_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapSelect_js,
                              name: "BootstrapSelect_js",
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "new BootstrapSelect({{ inputId: '{0}', warnOnLeave: {1} }});",
                            id,
                            warnOnLeave.ToString().ToLower()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a list of radio buttons
        /// </summary>
        /// <param name="expression">
        /// The expression that evaluates to the name, id and selected value of the list 
        /// </param>
        /// <param name="options">
        /// The options that should be available in the list
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="inline">
        /// Should the radio buttons appear in-line
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="disabled">
        /// Make the input disabled 
        /// </param>
        /// <param name="scrollHeight">
        /// If there are many items then put the radios in scrolling box. This sets the height.
        /// </param>
        /// <param name="bringSelectedToTop">
        /// Should the selected item be displayed at the top of the list.
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// Value type of the expression
        /// </typeparam>
        /// <typeparam name="TOptionKey">
        /// Date type for the key of each option
        /// </typeparam>
        /// <typeparam name="TOptionValue">
        /// Date Type for the value of each option
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        [SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1126:PrefixCallsCorrectly", Justification = "Reviewed. Suppression is OK here.")]
        public MvcHtmlString RadiosFor<TValue, TOptionKey, TOptionValue>(
            Expression<Func<TModel, TValue>> expression,
            Dictionary<TOptionKey, TOptionValue> options,
            string title = null,
            bool inline = false,
            bool warnOnLeave = true,
            bool? disabled = null,
            int? scrollHeight = null,
            bool bringSelectedToTop = false,
            List<BusinessOperation.Business.Error> errors = null)
            where TOptionKey : TValue
        {
            var value = this.GetExpressionValue(expression);
            var name = this.GetExpressionAsName(expression);
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);

            var result = string.Format(
                "<div class=\"control-group {1}\">\n<label>{0}</label>\n", title, valid ? string.Empty : "error");

            if (scrollHeight != null)
            {
                result += string.Format("<div class=\"trooper y-scrolling\" style=\"height: {0}px\">", scrollHeight);
            }
            
            if (options != null)
            {
                // ReSharper disable once RedundantNameQualifier
                if (bringSelectedToTop && !object.ReferenceEquals(value, null) && options.Any(i => value.Equals(i.Key)))
                {
                    var item = options.FirstOrDefault(i => value.Equals(i.Key));
                    result += MakeRadioOption(item.Key, item.Value, value, name, this.IsControlDisabled(disabled), inline);
                }

                foreach (var item in options)
                {
                    // ReSharper disable once RedundantNameQualifier
                    if (bringSelectedToTop && !object.ReferenceEquals(value, null) && value.Equals(item.Key))
                    {
                        continue;
                    }

                    result += MakeRadioOption(item.Key, item.Value, value, name, this.IsControlDisabled(disabled), inline);
                }
            }

            if (scrollHeight != null)
            {
                result += "</div>";
            }

            result += "</div>\n";

            if (!this.Cruncher.HeaderJs().HasItem("BootstrapRadios_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapRadios_js,
                              name: "BootstrapRadios_js",
                              order: StoreItem.OrderOptions.Middle);
            }

            this.Cruncher.HeaderJs()
                    .AddInline(
                        string.Format(
                            "new BootstrapRadios({{ inputName: '{0}', warnOnLeave: {1} }});",
                            name,
                            warnOnLeave.ToString().ToLower()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a date picker
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="timezone">
        /// The time zone as hours and minutes. By default this is Brisbane time (GMT+1000)
        /// </param>
        /// <param name="readonly">
        /// Make the input readonly 
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="popoverPlacement">
        /// The popover Placement.
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString DatePickerFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            bool warnOnLeave = true,
            string timezone = "+10:00",
            bool? @readonly = null,
            Options.InputTextSizes? textSize = null,
            Options.PopoverPlacements popoverPlacement = Options.PopoverPlacements.Bottom,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.DateTimePickerFor(
                expression,
                Options.DateTimeFormat.Date,
                title: title,
                popoverPlacement: popoverPlacement,
                warnOnLeave: warnOnLeave,
                timezone: timezone,
                @readonly: @readonly,
                textSize: textSize,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Creates a time picker.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="timezone">
        /// The time zone as hours and minutes. By default this is Brisbane time (GMT+1000)
        /// </param>
        /// <param name="readonly">
        /// Make the input readonly 
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="popoverPlacement">
        /// The popover Placement.
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString TimePickerFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string title = null,
            bool warnOnLeave = true,
            string timezone = "+10:00",
            bool? @readonly = null,
            Options.InputTextSizes? textSize = null,
            Options.PopoverPlacements popoverPlacement = Options.PopoverPlacements.Bottom,
            List<BusinessOperation.Business.Error> errors = null)
        {
            return this.DateTimePickerFor(
                expression,
                Options.DateTimeFormat.Time,
                title: title,
                warnOnLeave: warnOnLeave,
                timezone: timezone,
                @readonly: @readonly,
                textSize: textSize,
                popoverPlacement: popoverPlacement,
                errors: errors ?? this.Errors);
        }

        /// <summary>
        /// Creates a date and time picker.
        /// </summary>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="dateTimeFormat">
        /// The date time format.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="warnOnLeave">
        /// If this input contents is changed by the user should the page display a warning if the
        /// user attempts to navigate away without saving.
        /// </param>
        /// <param name="timezone">
        /// The time zone as hours and minutes. By default this is Brisbane time (GMT+1000)
        /// </param>
        /// <param name="readonly">
        /// Make the input readonly 
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="popoverPlacement">
        /// The popover Placement of the calendar
        /// </param>
        /// <param name="errors">
        /// The errors from a previous post.
        /// </param>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString DateTimePickerFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            Options.DateTimeFormat dateTimeFormat = Options.DateTimeFormat.DateAndTime,
            string title = null,
            bool warnOnLeave = true,
            string timezone = "+10:00",
            bool? @readonly = null,
            Options.InputTextSizes? textSize = null,
            Options.PopoverPlacements popoverPlacement = Options.PopoverPlacements.Bottom,
            List<BusinessOperation.Business.Error> errors = null)
        {
            if (!this.Cruncher.HeaderJs().HasItem("BootstrapDateTimePicker_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapDateTimePicker_js,
                              name: "BootstrapDateTimePicker_js",
                              order: StoreItem.OrderOptions.Middle);
                this.Cruncher.HeaderCss()
                          .AddInline(
                              Resources.BootstrapDateTimePicker_less, name: "BootstrapDateTimePicker_less");
            }

            var value = Conversion.ConvertToDateTime(this.GetExpressionValue(expression));
            var name = this.GetExpressionAsName(expression);
            var id = this.GetExpressionAsId(expression);
            var format = string.Empty;
            var pickDate = false;
            var pickTime = false;
            var pickSeconds = false;
            var valid = this.IsPropertyValid(expression, errors ?? this.Errors);

            switch (dateTimeFormat)
            {
                case Options.DateTimeFormat.DateAndTime:
                    format = "dd/MM/yyyy hh:mm:ss";
                    pickDate = true;
                    pickTime = true;
                    pickSeconds = true;
                    break;
                case Options.DateTimeFormat.Date:
                    format = "dd/MM/yyyy";
                    pickDate = true;
                    break;
                case Options.DateTimeFormat.Time:
                    format = "hh:mm:ss";
                    pickTime = true;
                    pickSeconds = true;
                    break;
                case Options.DateTimeFormat.TimeNoSeconds:
                    format = "hh:mm";
                    pickTime = true;
                    break;
                case Options.DateTimeFormat.DateTimeNoSeconds:
                    format = "dd/MM/yyyy hh:mm";
                    pickDate = true;
                    pickTime = true;
                    break;
            }

            var result = "<div id=\"" + id + "_helper\" class=\"bootstrapDateTimePicker\">\n"
                         + "<div class=\"controls input-group\">\n" + "<input class=\"form-control date-input "
                         + (textSize == null ? string.Empty : FormatInputTextSize(textSize)) + "\" id=\"" + id 
                         + "\" name=\"" + name + "\" value=\"" + (value == null ? string.Empty : ((DateTime)value).ToString(format))
                         + "\" title=\"Entry format is " + format + "\" type=\"text\" "
                         + (this.IsControlReadonly(@readonly) ? "readonly=\"readonly\"" : string.Empty) + "/>\n";

            if (!this.IsControlReadonly(@readonly))
            {
                result += "<span class=\"input-group-btn\">\n"
                          + "<button class=\"btn btn-default date-select\" type=\"button\">\n<i class=\"glyphicon "
                          + (pickTime && !pickDate ? "glyphicon-time" : "glyphicon-calendar") + "\">\n</i>"
                          + "<button class=\"btn btn-default date-delete\" type=\"button\">\n<i class=\"glyphicon glyphicon-remove-circle\">"
                          + "</i>\n</button>\n</span>";
            }

            result += "\n</div>\n</div>\n";

            result = FormatControlGroup(title, id, valid, result);

            this.Cruncher.HeaderJs().AddInline(
                string.Format(
                "var {0}_BootstrapDateTimePicker = new BootstrapDateTimePicker("
                + "{{controlId: '{0}', pickDate: {1}, pickTime: {2}, pickSeconds: {3}, warnOnLeave: {4}, popoverPlacement: '{5}', format: '{6}', timezone: '{7}' }});", 
                id,
                pickDate.ToString(CultureInfo.InvariantCulture).ToLower(),
                pickTime.ToString(CultureInfo.InvariantCulture).ToLower(),
                pickSeconds.ToString(CultureInfo.InvariantCulture).ToLower(),
                warnOnLeave.ToString().ToLower(),
                this.PopoverPlacementToString(popoverPlacement),
                format,
                timezone));
            
            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a search box. When the user starts typing in the box a pop-out appears with any
        /// matching results from the server.
        /// </summary>
        /// <param name="id">
        /// The ID of the control
        /// </param>
        /// <param name="dataSourceUrl">
        /// The data source URL that the control will post to for matches. The receiving controller method 
        /// should have 1 string parameter called 'text' in which the users query will be delivered.
        /// </param>
        /// <param name="searchValueField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the value when displaying results.
        /// </param>
        /// <param name="searchTextField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the display text when displaying results.
        /// </param>
        /// <param name="selectedTextField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the display text when updating the selected result.
        /// </param>
        /// <param name="selectEvent">
        /// When the AJAX call returns the result dataset and an item is selected the supplied event (if any) will fire
        /// upon user selection.
        /// </param>
        /// <param name="selectedValue">
        /// When rendering the page this can preset the control with a selected value
        /// </param>
        /// <param name="selectedText">
        /// When rendering the page this can preset the control with text for the selected value
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="scrollHeight">
        /// Determines the display scroll height of the result list.
        /// </param>
        /// <param name="popoutWidth">
        /// You can override the width of the pop-out. In search boxes where the placement is the left or right you 
        /// might need to set this to ensure that all the text can be seen.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="popoverPlacement">
        /// The popover placement of the results should appear at the left, right, above or below.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString SearchBox(
            string id,
            string dataSourceUrl,
            string searchValueField,
            string searchTextField,
            string selectedTextField,
            string selectEvent = null,
            string selectedValue = null,
            string selectedText = null,
            bool? @readonly = null,
            int scrollHeight = 150,
            int? popoutWidth = null,
            Options.InputTextSizes? textSize = null,
            Options.PopoverPlacements popoverPlacement = Options.PopoverPlacements.Bottom,
            string title = null)
        {
            if (!this.Cruncher.HeaderJs().HasItem("BootstrapSearchBox_js"))
            {
                this.Cruncher.HeaderJs()
                          .AddInline(
                              Resources.BootstrapSearchBox_js,
                              name: "BootstrapSearchBox_js",
                              order: StoreItem.OrderOptions.Middle);
                this.Cruncher.HeaderCss().AddInline(Resources.BootstrapSearchBox_less, name: "BootstrapSearchBox_less", less: true);
            }

            var name = id.Replace("_", ".");

            var result = string.Format(
                "<input type=\"hidden\" id=\"{0}\" name=\"{1}\" value=\"{2}\" />\n", id, name, selectedValue);
            result += string.Format("<div class=\"bs-search-box\" id=\"{0}_bs_search_box\">\n", id);

            result += string.Format(
                "<input type=\"text\" id=\"{0}_search\" name=\"{1}.search\" class=\"form-control {2}\" value=\"{3}\" {4} autocomplete=\"off\" />\n",
                id,
                name,
                textSize == null ? string.Empty : FormatInputTextSize(textSize),
                selectedText,
                this.IsControlReadonly(@readonly) ? "readonly=\"readonly\"" : string.Empty);
            
            result += "</div>\n";
            
            result = FormatControlGroup(title, name, true, result);

            this.Cruncher.HeaderJs()
                      .AddInline(
                          string.Format(
                              "var {0}_BootstrapSearchBox = new BootstrapSearchBox("
                              + "{{ inputName: '{0}', selectEvent: {1}, dataSourceUrl: '{2}', "
                              + "searchValueField: '{3}', searchTextField: '{4}', selectedTextField: '{5}', scrollHeight: {6}, "
                              + "popoverPlacement: '{7}', popoutWidth: {8} }});",
                              id,
                              string.IsNullOrEmpty(selectEvent) ? "null" : selectEvent,
                              dataSourceUrl,
                              searchValueField,
                              searchTextField,
                              selectedTextField,
                              scrollHeight,
                              this.PopoverPlacementToString(popoverPlacement),
                              popoutWidth == null ? "null" : popoutWidth.ToString()));

            return MvcHtmlString.Create(result);
        }

        /// <summary>
        /// Creates a search box. When the user starts typing in the box a pop-out appears with any
        /// matching results from the server.
        /// </summary>
        /// <typeparam name="TValue">
        /// The value for the input
        /// </typeparam>
        /// <param name="expression">
        /// The expression.
        /// </param>
        /// <param name="dataSourceUrl">
        /// The data source URL that the control will post to for matches. The receiving controller method 
        /// should have 1 string parameter called 'text' in which the users query will be delivered.
        /// </param>
        /// <param name="searchValueField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the value when displaying results.
        /// </param>
        /// <param name="searchTextField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the display text when displaying results.
        /// </param>
        /// <param name="selectedTextField">
        /// When the AJAX call returns the result dataset should have a column with this name. It will be used
        /// as the display text when updating the selected result.
        /// </param>
        /// <param name="selectEvent">
        /// When the AJAX call returns the result dataset and an item is selected the supplied event (if any) will fire
        /// upon user selection.
        /// </param>
        /// <param name="selectedText">
        /// When rendering the page this can preset the control with text for the selected value
        /// </param>
        /// <param name="readonly">
        /// Should the textbox be readonly by default
        /// </param>
        /// <param name="scrollHeight">
        /// Determines the display height scroll size of the result list.
        /// </param>
        /// <param name="popoutWidth">
        /// You can override the width of the pop-out. In search boxes where the placement is the left or right you 
        /// might need to set this to ensure that all the text can be seen.
        /// </param>
        /// <param name="textSize">
        /// The text size of the input
        /// </param>
        /// <param name="popoverPlacement">
        /// The popover placement of the results should appear at the left, right, above or below.
        /// </param>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <returns>
        /// The <see cref="MvcHtmlString"/>.
        /// </returns>
        public MvcHtmlString SearchBoxFor<TValue>(
            Expression<Func<TModel, TValue>> expression,
            string dataSourceUrl,
            string searchValueField,
            string searchTextField,
            string selectedTextField,
            string selectEvent = null,
            string selectedText = null,
            bool? @readonly = null,
            int scrollHeight = 150,
            int? popoutWidth = null,
            Options.InputTextSizes? textSize = null,
            Options.PopoverPlacements popoverPlacement = Options.PopoverPlacements.Bottom,
            string title = null)
        {
            var value = this.GetExpressionValue(expression);
            var id = this.GetExpressionAsId(expression);

            return this.SearchBox(
                id,
                dataSourceUrl,
                searchValueField,
                searchTextField,
                searchTextField,
                selectEvent: selectEvent,
                // ReSharper disable RedundantNameQualifier
                selectedValue: object.ReferenceEquals(value, null) ? null : value.ToString(),
                // ReSharper restore RedundantNameQualifier
                selectedText: selectedText,
                @readonly: @readonly,
                scrollHeight: scrollHeight,
                popoutWidth: popoutWidth,
                textSize: textSize,
                popoverPlacement: popoverPlacement,
                title: title);
        }
        
        /// <summary>
        /// Returns the 'addon' markup for including text before or after a text box control.
        /// Use this method when creating your own specific layouts in the TextBox methods.
        /// </summary>
        /// <param name="html">
        /// The html you want to display.
        /// </param>
        /// <returns>
        /// The result <see cref="string"/>.
        /// </returns>
        public string MakeTextBoxAddon(string html)
        {
            return "<span class=\"input-group-addon\">" + html + "</span>";
        }

        /// <summary>
        /// Makes a radio option entry for RadiosFor
        /// </summary>
        /// <typeparam name="TOptionKey">The data type of the option key</typeparam>
        /// <typeparam name="TOptionValue">The data type of the option value</typeparam>
        /// <typeparam name="TValue">The data type of the selected value</typeparam>
        /// <param name="key">The key value of the option</param>
        /// <param name="value">The text value of the option</param>
        /// <param name="selectedValue">The selected value from the options</param>
        /// <param name="name">The name of the radio element</param>
        /// <param name="disabled">Should the element be disabled</param>
        /// <param name="inline">Should the element be inline</param>
        /// <returns>String that represents the radio option</returns>
        private static string MakeRadioOption<TOptionKey, TOptionValue, TValue>(
            TOptionKey key,
            TOptionValue value,
            TValue selectedValue,
            string name,
            bool disabled,
            bool inline)
        {
            var result = string.Format("<label class=\"control-label radio{0}\">\n", inline ? " inline" : string.Empty);
            result += string.Format(
                "<input type=\"radio\" name=\"{0}\" value=\"{1}\" {2}{3}/> {4}\n",
                name,
                key,
                // ReSharper disable once RedundantNameQualifier
                !object.ReferenceEquals(selectedValue, null) && selectedValue.Equals(key) ? "checked=\"checked\"" : string.Empty,
                disabled ? " disabled=\"disabled\"" : string.Empty,
                value);
            result += "</label>\n";

            return result;
        }

        /// <summary>
        /// Wraps the control in a format control group and attaches a title
        /// </summary>
        /// <param name="title">
        /// The title.
        /// </param>
        /// <param name="forId">
        /// The for id.
        /// </param>
        /// <param name="valid">
        /// Is the data in the control considered valid. If not then it will be highlighted in red.
        /// </param>
        /// <param name="content">
        /// The content.
        /// </param>
        /// <param name="postAppendContent">
        /// Any content (buttons etc) that should be appended after the content.
        /// </param>
        /// <param name="class">
        /// The class.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string FormatControlGroup(
            string title,
            string forId,
            bool valid,
            string content,
            string postAppendContent = null,
            string @class = null)
        {
            var result = string.Empty;

            if (!string.IsNullOrEmpty(title))
            {
                result +=
                    string.Format(
                        "<div class=\"form-group {0} {1}\">\n"
                        + "<label class=\"control-label\" for=\"{2}\">{3}</label>\n",
                        valid ? string.Empty : "has-error",
                        @class,
                        forId,
                        title);
            }

            result += content;

            if (!string.IsNullOrEmpty(postAppendContent))
            {
                result += string.Format("<span class=\"add-on\">{0}</span>\n", postAppendContent);
            }

            if (!string.IsNullOrEmpty(title))
            {
                result += "</div>\n";
            }

            return result;
        }

        /// <summary>
        /// Determine the class string for the supplied text size
        /// </summary>
        /// <param name="textSize">The text size</param>
        /// <returns>The CSS string representation</returns>
        private static string FormatInputTextSize(Options.InputTextSizes? textSize = null)
        {
            switch (textSize)
            {
                case Options.InputTextSizes.Large:
                    return "input-lg";
                case Options.InputTextSizes.Default:
                    return string.Empty;
                case Options.InputTextSizes.Small:
                    return "input-sm";
                default:
                    return string.Empty;
            }
        }

        /// <summary>
        /// Generates a class attribute with the given classes. Duplicates are removed.
        /// </summary>
        /// <param name="classes">
        /// The classes.
        /// </param>
        /// <returns>
        /// The class <see cref="string"/>.
        /// </returns>
        private static string MakeClassAttribute(List<string> classes)
        {
            if (classes == null || !classes.Any())
            {
                return "class=\"\"";
            }

            return string.Format("class=\"{0}\"", string.Join(" ", classes.Distinct()));
        }

        /// <summary>
        /// The add class to the classes and return the result.
        /// If the supplied classes is null then a new classes is created.
        /// </summary>
        /// <param name="classes">
        /// The classes.
        /// </param>
        /// <param name="className">
        /// The class name.
        /// </param>
        /// <returns>
        /// The <see cref="List"/>.
        /// </returns>
        private static List<string> AddClass(List<string> classes, string className)
        {
            if (classes == null)
            {
                classes = new List<string>();
            }

            if (!classes.Contains(className))
            {
                classes.Add(className);
            }

            return classes;
        }

        /// <summary>
        /// Add the new classes to the classes and return the result.
        /// If the supplied classes is null then a new classes is created.
        /// </summary>
        /// <param name="classes">
        /// The classes.
        /// </param>
        /// <param name="newClasses">
        /// The class names to add.
        /// </param>
        /// <returns>
        /// The result list.
        /// </returns>
        private static List<string> AddClasses(List<string> classes, List<string> newClasses)
        {
            if (classes == null)
            {
                classes = new List<string>();
            }

            if (newClasses == null || !newClasses.Any())
            {
                return classes;
            }

            classes.AddRange(newClasses);
            
            return classes.Distinct().ToList();
        }

        /// <summary>
        /// Determine a control should be disabled based on the provided
        /// parameter and class property ControlsEnabled. If disabled
        /// is then class property determines the outcome. 
        /// </summary>
        /// <param name="disabled">The value passed directly to the method</param>
        /// <returns>True if the control should be enabled</returns>
        private bool IsControlDisabled(bool? disabled)
        {
            if (disabled != null)
            {
                return (bool)disabled;
            }

            if (this.ControlsEnabled != null)
            {
                return !(bool)this.ControlsEnabled;
            }

            return false;
        }

        /// <summary>
        /// Determine a control should be readonly based on the provided
        /// parameter and class property ControlsEnabled. If readonly
        /// is then class property determines the outcome. 
        /// </summary>
        /// <param name="readonly">The value passed directly to the method</param>
        /// <returns>True if the control should be readonly</returns>
        private bool IsControlReadonly(bool? @readonly)
        {
            if (@readonly != null)
            {
                return (bool)@readonly;
            }

            if (this.ControlsEnabled != null)
            {
                return !(bool)this.ControlsEnabled;
            }

            return false;
        }

        
    }
}